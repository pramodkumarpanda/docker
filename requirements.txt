Django==2.0.3
djangorestframework
DOCKER SWARM CLUSTER:
------------------------------
 yum install docker -y
 docker swarm init --advertise-addr 172.31.90.107
 docker swarm join --token """" 172.31.90.107:2377
 docker node ls # List No of nodes availabe on cluster
 docker service create -p 80:80 --name webserver nginx # For Testing Purpose use it, Create a service
 docker service ls
 docker service ps webserver
 Another feature of Docker Swarm is the ability to scale a service, that is, spin up additional instances of a service.
 docker service scale webserver=5
 docker service ps webserver
 docker service rollback webserver # It will go to the Previous state.
 ################################################################################
 DOCKER COMPOSE TUTORIAL:
 ----------------------------------------------------
 --link:
 -----------------
 docker run -d --name db training/postgres
 
 docker run -d -P --name web --link db:db training/webapp python app.py
 --link <name or id>:alias
 Where name is the name of the container weâ€™re linking to and alias is an alias for the link name.
 EXAMPLE:
 --------------------
  vi app.py
  ----------------------------
  import time
  import redis
  from flask import Flask

  app = Flask(__name__)
  cache = redis.Redis(host='redis', port=6379)


 def get_hit_count():
     retries = 5
     while True:
         try:
             return cache.incr('hits')
         except redis.exceptions.ConnectionError as exc:
             if retries == 0:
                 raise exc
             retries -= 1
             time.sleep(0.5)


 @app.route('/')
 def hello():
     count = get_hit_count()
     return 'Hello World! I have been seen {} times.\n'.format(count)
     
vi requirements.txt
-----------------------
 redis
 flask
 docker run --name redis -itd redis
  vi Dockerfile
   FROM python:3.7-alpine
   WORKDIR /code
   ENV FLASK_APP app.py
   ENV FLASK_RUN_HOST 0.0.0.0
   RUN apk add --no-cache gcc musl-dev linux-headers
   COPY requirements.txt requirements.txt
   RUN pip install -r requirements.txt
   COPY . .
   CMD ["flask", "run"]
 docker build --tag app_image:1 .
 docker run --link redis:redis --name app -p 5000:5000 -itd app_image:1
 

